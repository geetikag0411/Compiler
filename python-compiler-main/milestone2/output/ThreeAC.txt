len:
begin function
pushq $rbp
$rbp =  $rsp
$rsp = $rsp - 68
mov48 regs -56($rbp)
movq 16($rbp) a
a = a - 4
b =  *a
movq b $rax
mov48 -56(rbp) regs
mov8 $rbp $rsp
popq $rbp
ret
end function

binarySearch:
begin function
pushq $rbp
$rbp =  $rsp
mov4 16(rbp) array
mov4 24(rbp) x
mov4 28(rbp) low
mov4 32(rbp) high
$rsp = $rsp - 84
mov48 regs -56(rbp)
L1:
$t1 = low <= high
if not ($t1) goto L2:
$t2 = high - low
$t3 =  2
$t4 = $t2 // $t3
$t5 = low + $t4
mid =  $t5
$t6 = mid * 4
$t7 = array + $t6
$t8 = *$t7 == x
if not ($t8) goto L5:
movq mid $rax
mov48 -56(rbp) regs
mov8 $rbp $rsp
popq $rbp
ret
goto  L3:
L5:
$t9 = mid * 4
$t10 = array + $t9
$t11 = *$t10 < x
if not ($t11) goto L4:
$t12 =  5
he =  $t12
$t13 =  1
$t14 = mid + $t13
low =  $t14
goto  L3:
L4:
$t15 =  1
$t16 = mid - $t15
high =  $t16
L3:
goto  L1:
L2:
$t17 =  1
$t18 = - $t17
movq $t18 $rax
mov48 -56(rbp) regs
mov8 $rbp $rsp
popq $rbp
ret
mov48 -56(rbp) regs
mov8 $rbp $rsp
popq $rbp
ret
end function

main:
begin function
pushq $rbp
$rbp =  $rsp
$rsp = $rsp - 76
mov48 regs -56(rbp)
$t19 =  7
$t20 =  8
$t21 =  9
$t22 =  1
$t23 =  2
pushl 16
call allocmem 1
$rsp = $rsp + 4
$t24 =  $rax
*$t24 =  3
array2 = $t24 + 4
$t25 = array2 + 0
*$t25 =  $t22
$t26 = array2 + 4
*$t26 =  $t23
$t27 = array2 + 8
*$t27 =  $t23
$t28 =  3
$t29 =  5
$t30 = $t28 ^ $t29
$t31 =  4
$t32 =  1
$t33 = $t31 >> $t32
$t34 =  0
$t35 = $t34 * 4
$t36 = array2 + $t35
$t37 =  6
$t38 =  4
$t39 = $t37 / $t38
$t40 =  7
$t41 =  5
$t42 = $t40 and $t41
$t43 =  6
$t44 =  8
$t45 = $t43 - $t44
$t46 =  6
$t47 =  9
$t48 = $t46 * $t47
pushl 32
call allocmem 1
$rsp = $rsp + 4
$t49 =  $rax
*$t49 =  7
array = $t49 + 4
$t50 = array + 0
*$t50 =  $t30
$t51 = array + 4
*$t51 =  $t33
$t52 = array + 8
*$t52 =  *$t36
$t53 = array + 12
*$t53 =  $t39
$t54 = array + 16
*$t54 =  $t42
$t55 = array + 20
*$t55 =  $t45
$t56 = array + 24
*$t56 =  $t48
push4 array
call len 1
$rsp = $rsp + 0
$t59 =  $rax
$t60 =  1
$t61 = $t59 - $t60
push4 $t61
$t58 =  0
push4 $t58
$t57 =  4
push4 $t57
push4 array
call binarySearch 4
$rsp = $rsp + 0
$t62 =  $rax
result =  $t62
$t63 =  1
$t64 = - $t63
$t65 = result != $t64
if not ($t65) goto L7:
$t66 =  "Element is present at index:"
push8 $t66
call print 1
$rsp = $rsp + 8
push4 result
call print 1
$rsp = $rsp + 4
goto  L6:
L7:
$t67 =  "Element is not present"
push8 $t67
call print 1
$rsp = $rsp + 8
L6:
mov48 -56(rbp) regs
mov8 $rbp $rsp
popq $rbp
ret
end function

$t68 =  4
a =  $t68

$t69 =  "__main__"
pushq $t69
pushq __name__
call strcmp 2
$rsp = $rsp + 16
$t70 =  $rax
$t71 = $t70 == 0
if not ($t71) goto L8:
call main 0
$rsp = $rsp + 0
L8:

