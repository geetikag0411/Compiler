Calculator.class
func add
move8 rbp -8(rsp)
rbp = rsp
move4 0(rbp) x
move4 4(rbp) y
move4 8(rbp) z
sub rsp, $60
move48 regs -56(rbp)
t0 = x +int y
result = t0
RRE = result
nop
move48 -56(rbp) regs
move8 rbp rsp
move8 -8(rbp) rbp
move8 RRE -8(rsp)
sub rsp, $8
ret
endfunc

endclass
test_7.class
func main
move8 rbp -8(rsp)
rbp = rsp
sub rsp, $76
move48 regs -56(rbp)
call allocmem 0$
t1 = RRE 
move8 t1 -8(rbp)
call Calculator.constructor
calc = t1
t3 = 5
x = t3
t4 = 3
y = t4
t5 = 8
sub rsp, $8
move8 ra (rsp)
sub rsp, $16
move4 x -84(rbp)
move4 y -80(rbp)
move8 t5 -76(rbp)
call calc.add
reclaim return value
add rsp, $16
move8 (rsp) ra
add rsp, $8
result = RRE
nop
move48 -56(rbp) regs
move8 rbp rsp
move8 -8(rbp) rbp
move8 RRE -8(rsp)
sub rsp, $8
ret
endfunc
endclass
